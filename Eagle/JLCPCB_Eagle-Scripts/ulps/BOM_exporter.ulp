/*
 BOM_exporter.ulp
 DvidMakesThings
 https://github.com/DvidMakesThings
*/

// map of Eagle SMD layers
int layer_id_map[]      = { 1, 16 };
string layer_name_map[] = { "Top", "Bottom" };

// storage for selected parts + their side
UL_ELEMENT selected_elements[];
int        selected_side[];

string replace_commas(string s) {
    while (strstr(s, ",") >= 0) {  // convert commas to spaces
        string substitution_string = " ";
        sprintf(s, "%s%s%s",
            strsub(s, 0, strstr(s, ",")),
            substitution_string,
            strsub(s, strstr(s, ",")+1)
        );
    }
    return s;
}

string xml_escape(string s) {
    string out = s;
    while (strstr(out, "&") >= 0) {
        sprintf(out, "%s%s%s", strsub(out,0,strstr(out,"&")), "&amp;", strsub(out,strstr(out,"&")+1));
    }
    while (strstr(out, "<") >= 0) {
        sprintf(out, "%s%s%s", strsub(out,0,strstr(out,"<")), "&lt;", strsub(out,strstr(out,"<")+1));
    }
    while (strstr(out, ">") >= 0) {
        sprintf(out, "%s%s%s", strsub(out,0,strstr(out,">")), "&gt;", strsub(out,strstr(out,">")+1));
    }
    while (strstr(out, "\"") >= 0) {
        sprintf(out, "%s%s%s", strsub(out,0,strstr(out,"\"")), "&quot;", strsub(out,strstr(out,"\"")+1));
    }
    return out;
}

if (board) board(B) {
    int skip_empty = 1;   // set to 0 if you want parts with blank values
    string outdir = dlgDirectory("Export files to", filedir(B.name));
    if (outdir == "") exit(0);

    // collect every populated element, detect its side
    int count = 0;
    B.elements(E) if (E.populate) {
        // record the part
        selected_elements[count] = E;

        // default to Top
        int side = 0;
        // scan all padsâ€”if any pad is SMD on Bottom, mark Bottom
        E.package.contacts(C) {
            if (C.smd && C.smd.layer == layer_id_map[1]) {
                side = 1;
                break;
            }
        }
        selected_side[count] = side;
        count++;
    }

    // base filename (no extension)
    string base = outdir + "/"
        + strsub(filename(B.name), 0, strlen(filename(B.name)) - 4);

    string cpl_file = base + "_centroid.csv";
    string bom_file = base + "_bom.csv";   

    //
    // 1) CPL
    //
	output(cpl_file) {
		printf("### Module positions export ###\n");
		printf("### Printed by EAGLE ULP ###\n");
		printf("### Unit = mm, Angle = deg.\n");
		printf("# Ref,Val,Package,PosX,PosY,Rot,Side\n");

		for (int i = 0; i < count; i++) {
			UL_ELEMENT E = selected_elements[i];
			int side = selected_side[i];
			if (skip_empty && E.value == "") continue;

			int angle = E.angle;
			E.attributes(A) {
				if (A.name == "NEXTPCB_ROT" || A.name == "NEXTPCB_ROTATION")
					angle += strtol(A.value);
			}
			if (side == 1)
				angle = (360 - angle + 180) % 360;
			real ang = angle;

			string side_s = (side == 0) ? "top" : "bottom";

			printf("%s,%s,%s,%.4f,%.4f,%.4f,%s\n",
				   E.name,
				   replace_commas(E.value),
				   replace_commas(E.package.name),
				   u2mm(E.x),
				   u2mm(E.y),
				   ang,
				   side_s);
		}
	}


    //
    // 2) BOM 
    //
    output(bom_file) {
        printf("Manufacturer Part Number,Quantity,Manufacturer(Optional),Package(Optional)\n");

        int            indexes[];
        numeric string values[];

        for (int i = 0; i < count; i++) {
            indexes[i] = i;
            values[i]  = selected_elements[i].value;
        }
        sort(count, indexes, values);

        string curr_val     = "";
        string curr_pkg     = "";
        string curr_mpn     = "";
        string curr_mfr     = "";
        int    qty          = 0;
        int    notstarting  = 0;

        for (int j = 0; j < count; j++) {
            UL_ELEMENT E = selected_elements[indexes[j]];
            if (skip_empty && E.value == "") continue;

            string mpn = "";
            E.attributes(A) {
                if (A.name == "HQ_PART") mpn = replace_commas(A.value);
                if (mpn == "" && A.name == "MPN") mpn = replace_commas(A.value);
            }

            string mfr = "";
            E.attributes(A) {
                if (A.name == "MANUFACTURER") mfr = replace_commas(A.value);
            }

            if (notstarting
             && (E.value        != curr_val
              || E.package.name != curr_pkg
              || mpn            != curr_mpn
              || mfr            != curr_mfr)) {

                printf("%s,%d,%s,%s\n",
                    curr_mpn,
                    qty,
                    curr_mfr,
                    curr_pkg
                );

                qty = 0;
            }

            notstarting = 1;
            curr_val = replace_commas(E.value);
            curr_pkg = replace_commas(E.package.name);
            curr_mpn = mpn;
            curr_mfr = mfr;
            qty++;
        }

        // last line
        if (curr_val != "") {
            printf("%s,%d,%s,%s\n",
                curr_mpn,
                qty,
                curr_mfr,
                curr_pkg
            );
        }
    }


    dlgMessageBox(
        "Export complete:\n" +
        cpl_file + "\n" +
        bom_file,
        "Done"
    );

} else {
    dlgMessageBox("Run this ULP from a Board", "Error");
    exit(0);
}
